mapping query: 
select A.accNum as aAcc, B.accNum as bAcc, A.dateOfOriginalSubmission as aOriginalDate, B.filedDate as bFile 
from form4head A, form4head B 
where A.documentType = '4/A' and B.documentType = '4' and A.dateOfOriginalSubmission = B.filedDate and A.publicDocCount = B.publicDocCount and A.schemaVersion = B.schemaVersion and A.notSubjectToSection16 = B.notSubjectToSection16 and A.issuerName = B.issuerName and A.issuerCik = B.issuerCik and A.issuerIndustrialClassification = B.issuerIndustrialClassification and A.issuerIrs = B.issuerIrs and A.issuerIncorpState = B.issuerIncorpState and A.issuerFiscalYrEnd = B.issuerFiscalYrEnd and A.issuerBusinessStreet1 = B.issuerBusinessStreet1 and A.issuerBusinessCity = B.issuerBusinessCity and A.issuerBusinessState = B.issuerBusinessState and A.issuerBusinessZip = B.issuerBusinessZip and A.issuerBusinessPhone = B.issuerBusinessPhone and A.issuerMailStreet1 = B.issuerMailStreet1 and A.issuerMailStreet2 = B.issuerMailStreet2 and A.issuerMailCity = B.issuerMailCity and A.issuerMailState = B.issuerMailState and A.issuerMailZip = B.issuerMailZip and A.issuerTradingSymbol = B.issuerTradingSymbol and A.rptOwnerName = B.rptOwnerName and A.rptOwnerCik = B.rptOwnerCik and A.rptOwnerStreet1 = B.rptOwnerStreet1 and A.rptOwnerStreet2 = B.rptOwnerStreet2 and A.rptOwnerCity = B.rptOwnerCity and A.rptOwnerState = B.rptOwnerState and A.rptOwnerZipCode = B.rptOwnerZipCode and A.rptOwnerisDirector = B.rptOwnerisDirector and A.rptOwnerisOfficer = B.rptOwnerisOfficer and A.rptOwnerisTenPercentOwner = B.rptOwnerisTenPercentOwner and A.rptOwnerisOther = B.rptOwnerisOther;
===
Header fields : not tabbed means must be same; tabbed = can be diff
'publicDocCount',
    'filedDate',    check in 4 against 4/a's dateoforiginal 
'schemaVersion',
    'dateOfOriginalSubmission',
'notSubjectToSection16',
'issuerName',
'issuerCik',
'issuerIndustrialClassification',
'issuerIrs',
'issuerIncorpState',
'issuerFiscalYrEnd',
'issuerBusinessStreet1',
'issuerBusinessCity',   //
'issuerBusinessState',
'issuerBusinessZip',
'issuerBusinessPhone',
'issuerMailStreet1',
'issuerMailStreet2',
'issuerMailCity',
'issuerMailState',
'issuerMailZip',
'issuerTradingSymbol',
'rptOwnerName',
'rptOwnerCik',
    'rptOwnerFormType',
    'rptOwnerSecAct',
    'rptOwnerSecFileNum',
    'rptOwnerFilmNum',
'rptOwnerBusinessPhone',
'rptOwnerStreet1',
'rptOwnerStreet2',
'rptOwnerCity',
'rptOwnerState',
'rptOwnerZipCode',
'rptOwnerStateDescription',
'rptOwnerisDirector',
'rptOwnerisOfficer',
'rptOwnerisTenPercentOwner',
'rptOwnerisOther'

dTfields - but although any field should be able to be changed??
    rowNumber integer DEFAULT 1,
    securityTitle text,         //if typo does it still matter
    transactionDate text,
    transactionFormType text,
ndtFields
    rowNumber integer DEFAULT 1,
===


===
sec form 4: announcement of insider trade (so its not illegal anymore)

* goal: compare & contrast original/amended form 4's

1. automate getting data from urls in list
2. figure out way to match original w amendment

foreign key = accnum

3 tables: header, non-derivative, derivative
Parse element tags from each Accession Number filing into the three tables:  form4head, form4dT and form4nDT.
===
===
Thomas Lee - collecting and parsing SEC documents
= Use the https protocol to fetch each filename
= for the first line in the file, submit an http request to:
https://www.sec.gov/Archives/edgar/data/1084869/0001084869-07-000034.txt
    0001084869-07-000034.txt = accnum; id of file
    accnum is the filename in the URL and has a .txt suffix
= create directory ACCT
    ACCT
    - ARCHIVE subdir: store files (each w accnum)
    - SQLite database

- Write a Python script that takes in a list of URLs and whose side effect is to populate the ARCHIVE subdirectory with the .txt filing for each accession number.
- beware of special char: use 'latin-1' encoding when you write the output to a file.
- use urllib to download each file
    1. open an https connection by creating a request object named "response":  response = urllib.request.urlopen(url)
    2. get the text of the page by applying the "read" method to the request object named "response":  the_page = response.read()
    3. encode the_page in the Latin-1 encoding:  content = the_page.decode(encoding='latin-1')
    4. you can write the "content" to a file.  # file_handle.write(content)

* For each filing, if no XML -> create a list of accession numbers that do not have XML.
 else, parse the XML into one of three tables.
* Each filing will have a header and rows in each of two tables: the nonDeriativeTransactions and the deriativeTransactions.
    <derivativeTransaction>
* Parse element tags from each Accession Number filing into the three tables:  form4head, form4dT and form4nDT.
    * If a particular element tag does not exist in a particular filing instance (for example, it does not exist), insert an explicit NULL.
    * If you encounter an element tag in the filing that does NOT exist in the table description (see below), then add it to the table definition.

* Note that a filing may have more than one row in the Derivative-Table and also in the non-Derivative-Table.  In this case, you must create a variable called "rowNum" to keep track of the first, second, etc. row of the DerivativeTable or non-DeriativeTable respectively.

In the Derivative Table and non-Deriative Table, each row is identified by the Accession Number and the row Number,     0001084869-07-000034[-01]???


Remember, the rowNum is NOT something that you extract from the filing.  You make it up yourself.  Assume you are processing the XML tree left-to-right in depth-first manner.  The "first" transaction sub-tree corresponds to the first row of the table and so has rowNum = 1 and likewise for rowNum 2, etc.

* In some instances, you will insert the elementValue in the database.
    <officerTitle> President and CEO</officerTitle> has an element tag named officerTitle and a "value" of "President and CEO"  Insert the string "President and CEO" into the column "officerTitle"
 In other instances, the column name from the element has a child element named "value" and the value of the element is within a "value" tag.
<sharesOwnedFollowingTransaction>
   <value>187500</value>
</sharesOwnedFollowingTransaction>

So the column name is: sharesOwnedFollowingTransaction but the number to insert is <value>187500</value>

Please let me know if this makes sense.  A single filing may have three rows in the nonDerivativeTransaction table of the same accession number 12345.
So, the database table has three new rows:
accNum = 12345, rowNum = 1 and the transactionsShared etc. etc. and all of the remaining values in that row.  Then, add:
accNum = 12345, rowNum = 2 and the transactionsShared etc. for this second row
accNum = 12345, rowNum = 3 for this third transaction.

===
1. Josephine
- aggregate haas seminars into 1 calendar
- curr: haas has multiple groups with diff seminar; want to be able to see them all in 1 place


2. Fani
- nominations sheet. need multiple signatures from managers & etc.
- so gotta fill out form, sign it, scan it, send to highups, then print/sign/scan again
- automate process (~salesforce???)
->> peer review dashboard: form, auto notify highups to input google signature

curr: need source code for peer review dashboard. will campus accept electronically signed sheets??